name: Release

on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true
      VITE_APP_API:
        required: true
      VITE_START_PAGE_URL:
        required: true
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: 'false'
        required: false
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  draft_release:
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            platform: linux

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Configure environment
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
          ELECTRON_MIRROR: "https://npmmirror.com/mirrors/electron/"
          NODE_PRE_GYP_MIRROR: "https://npmmirror.com/mirrors/node-pre-gyp/"
        run: |
          echo "Environment configured"
          echo "ELECTRON_ARCH=x64" >> $GITHUB_ENV

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/electron
            ~/.cache/node-gyp
          key: ${{ runner.os }}-${{ matrix.arch }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-npm-

      - name: Setup Linux build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip python3-dev build-essential libx11-dev libxkbfile-dev libsecret-1-dev
          sudo ln -sf /usr/bin/python3 /usr/bin/python
          python3 -m pip install setuptools
          npm install -g node-gyp

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Install native modules
        run: npm install --ignore-scripts sqlite3 electron

      - name: Rebuild native modules for Linux
        run: |
          npm rebuild sqlite3 --build-from-source --python=/usr/bin/python3 --arch=x64

      - name: Install dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_wait_seconds: 30
          command: npm ci --verbose --ignore-scripts  # 跳过 postinstall

      - name: Build native modules for Linux
        run: |
          echo "Building native modules for Linux x64"
          cd ./packages/main/src/native-addon
          node-gyp clean
          node-gyp configure --arch=x64 -- -fexceptions
          node-gyp build --arch=x64 -- -fexceptions
          cd ../../..
          ls -la ./packages/main/src/native-addon/build/Release/

      - name: Create .env.production.local
        run: |
          echo "VITE_APP_API=${{ secrets.VITE_APP_API }}" > .env.production.local
          echo "VITE_START_PAGE_URL=${{ secrets.VITE_START_PAGE_URL }}" >> .env.production.local

      - name: Build Project
        run: npm run build

      - name: Build and Publish for Linux AppImage
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 30
          shell: bash
          command: npx electron-builder --linux appimage --x64 --config .electron-builder.config.js --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_TIME: ${{ github.run_number }}
